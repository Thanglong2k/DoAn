{"remainingRequest":"E:\\Nam4\\Ki2\\DoAnTotNghiep\\FE\\doantotnghiep\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Nam4\\Ki2\\DoAnTotNghiep\\FE\\doantotnghiep\\src\\components\\controls\\zoom-image\\index.vue?vue&type=style&index=0&id=2d8437fd&scoped=true&lang=css&","dependencies":[{"path":"E:\\Nam4\\Ki2\\DoAnTotNghiep\\FE\\doantotnghiep\\src\\components\\controls\\zoom-image\\index.vue","mtime":1654006502483},{"path":"E:\\Nam4\\Ki2\\DoAnTotNghiep\\FE\\doantotnghiep\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Nam4\\Ki2\\DoAnTotNghiep\\FE\\doantotnghiep\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\Nam4\\Ki2\\DoAnTotNghiep\\FE\\doantotnghiep\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\Nam4\\Ki2\\DoAnTotNghiep\\FE\\doantotnghiep\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Nam4\\Ki2\\DoAnTotNghiep\\FE\\doantotnghiep\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLnpvb20tb24taG92ZXIgew0KICBwb3NpdGlvbjogcmVsYXRpdmU7DQogIG92ZXJmbG93OiBoaWRkZW47DQp9DQouem9vbS1vbi1ob3ZlciAubm9ybWFsIHsNCiAgd2lkdGg6IDEwMCU7DQogIGhlaWdodDoxMDAlOw0KfQ0KLnpvb20tb24taG92ZXIgLnpvb20gew0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIG9wYWNpdHk6IDA7DQogIHRyYW5zZm9ybS1vcmlnaW46IHRvcCBsZWZ0Ow0KfQ0KLnpvb20tb24taG92ZXIuem9vbWVkIC56b29tIHsNCiAgb3BhY2l0eTogMTsNCn0NCi56b29tLW9uLWhvdmVyLnpvb21lZCAubm9ybWFsIHsNCiAgb3BhY2l0eTogMDsNCn0NCg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/controls/zoom-image","sourcesContent":["<template>\r\n  <div class=\"zoom-on-hover tw-w-full tw-h-full\" v-bind:class=\"{zoomed}\" @touchstart=\"touchzoom\"\r\n    @mousemove=\"move\" @mouseenter=\"zoom\" @mouseleave=\"unzoom\">\r\n    <img class=\"normal\" ref=\"normal\" :src=\"imgNormal\"/>\r\n    <img class=\"zoom\" ref=\"zoom\" :src=\"imgZoom || imgNormal\"/></div>\r\n</template>\r\n\r\n<script>\r\n// this component displays an image with the width of the parent element and on hover shows\r\n// the full image or a scaled image in the image area.\r\n// features: activate/deactivate method, active/inactive on load, scale parameter, separate zoom image,\r\n// event when all images loaded, event when images resized (responsive css, etc)\r\n\r\n function pageOffset(el) {\r\n  // -> {x: number, y: number}\r\n  // get the left and top offset of a dom block element\r\n  var rect = el.getBoundingClientRect(),\r\n    scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,\r\n    scrollTop = window.pageYOffset || document.documentElement.scrollTop;\r\n  return {\r\n    y: rect.top + scrollTop,\r\n    x: rect.left + scrollLeft\r\n  }\r\n}\r\nexport default {\r\n    props: [\"imgNormal\", \"imgZoom\", \"scale\", \"disabled\"],\r\n    data: function() {\r\n    return {\r\n      scaleFactor: 1,\r\n      resizeCheckInterval: null,\r\n      zoomed: false\r\n    }\r\n  },\r\n  methods: {\r\n    touchzoom: function(event) {\r\n      if (this.disabled) return\r\n      this.move(event)\r\n      this.zoomed = !this.zoomed\r\n    },\r\n    zoom: function() {\r\n      if (!this.disabled) this.zoomed = true\r\n    },\r\n    unzoom: function() {\r\n      if (!this.disabled) this.zoomed = false\r\n    },\r\n    move: function(event) {\r\n      if (this.disabled || !this.zoomed) return\r\n      var offset = pageOffset(this.$el)\r\n      var zoom = this.$refs.zoom\r\n      var normal = this.$refs.normal\r\n      var relativeX = event.clientX - offset.x + window.pageXOffset\r\n      var relativeY = event.clientY - offset.y + window.pageYOffset\r\n      var normalFactorX = relativeX / normal.offsetWidth\r\n      var normalFactorY = relativeY / normal.offsetHeight\r\n      var x = normalFactorX * (zoom.offsetWidth * this.scaleFactor - normal.offsetWidth)\r\n      var y = normalFactorY * (zoom.offsetHeight * this.scaleFactor - normal.offsetHeight)\r\n      zoom.style.left = -x + \"px\"\r\n      zoom.style.top = -y + \"px\"\r\n    },\r\n    initEventLoaded: function() {\r\n      // emit the \"loaded\" event if all images have been loaded\r\n      var promises = [this.$refs.zoom, this.$refs.normal].map(function(image) {\r\n        return new Promise(function(resolve, reject) {\r\n          image.addEventListener(\"load\", resolve)\r\n          image.addEventListener(\"error\", reject)\r\n        })\r\n      })\r\n      var component = this\r\n      Promise.all(promises).then(function() {\r\n        component.$emit(\"loaded\")\r\n      })\r\n    },\r\n    initEventResized: function() {\r\n      var normal = this.$refs.normal\r\n      var previousWidth = normal.offsetWidth\r\n      var previousHeight = normal.offsetHeight\r\n      var component = this\r\n      this.resizeCheckInterval = setInterval(function() {\r\n        if ((previousWidth != normal.offsetWidth) || (previousHeight != normal.offsetHeight)) {\r\n          previousWidth = normal.offsetWidth\r\n          previousHeight = normal.offsetHeight\r\n          component.$emit(\"resized\", {\r\n            width: normal.width,\r\n            height: normal.height,\r\n            fullWidth: normal.naturalWidth,\r\n            fullHeight: normal.naturalHeight\r\n          })\r\n        }\r\n      }, 1000)\r\n    },\r\n    \r\n  },\r\n  mounted: function() {\r\n    if (this.$props.scale) {\r\n      this.scaleFactor = parseInt(this.$props.scale)\r\n      this.$refs.zoom.style.transform = \"scale(\" + this.scaleFactor + \")\"\r\n    }\r\n    this.initEventLoaded()\r\n    this.initEventResized()\r\n  },\r\n  updated: function() {\r\n    this.initEventLoaded()\r\n  },\r\n  beforeDestroy: function() {\r\n    this.resizeCheckInterval && clearInterval(this.resizeCheckInterval)\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.zoom-on-hover {\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n.zoom-on-hover .normal {\r\n  width: 100%;\r\n  height:100%;\r\n}\r\n.zoom-on-hover .zoom {\r\n  position: absolute;\r\n  opacity: 0;\r\n  transform-origin: top left;\r\n}\r\n.zoom-on-hover.zoomed .zoom {\r\n  opacity: 1;\r\n}\r\n.zoom-on-hover.zoomed .normal {\r\n  opacity: 0;\r\n}\r\n</style>\r\n\r\n\r\n\r\n\r\n  \r\n  \r\n  \r\n"]}]}